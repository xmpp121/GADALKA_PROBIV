#!/usr/bin/env python3
# requirements: python-telegram-bot==20.* requests
import os, logging, requests, json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, filters

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CHOOSING, TYPING = range(2)

BREACHKA_API_KEY = os.environ.get("BREACHKA_API_KEY")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not BREACHKA_API_KEY or not TELEGRAM_TOKEN:
    raise RuntimeError("Set BREACHKA_API_KEY and TELEGRAM_TOKEN env vars")

def call_breachka(single_query: str, find_type="Summary", country="RU"):
    url = "https://www.breachka.com/api/v1/find/mass"
    headers = {"X-Api-Key": BREACHKA_API_KEY, "Content-Type": "application/json"}
    payload = {"requests": [single_query], "findType": find_type, "countryType": country}
    r = requests.post(url, headers=headers, json=payload, timeout=30)
    r.raise_for_status()
    return r.json()

def fmt(resp: dict) -> str:
    parts = []
    bad = resp.get("NotValidRequests", [])
    if bad: parts.append("‚ùó–ù–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é: " + ", ".join(bad))
    arr = resp.get("Responses", [])
    if not arr: 
        parts.append("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return "\n".join(parts)
    for e in arr:
        parts.append(f"üîé *–ó–∞–ø—Ä–æ—Å:* `{e.get('Query','')}`")
        inner = e.get("Responses", [])
        if not inner:
            parts.append("‚Äî –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤.")
            continue
        r = inner[0]
        def add(name, key, limit=6):
            vals = r.get(key, [])
            if vals:
                shown = vals[:limit]
                more = len(vals)-len(shown)
                s = "; ".join(map(str, shown)) + (f" (–∏ –µ—â—ë {more})" if more>0 else "")
                parts.append(f"*{name}:* {s}")
        add("–¢–µ–ª–µ—Ñ–æ–Ω—ã","Phone"); add("Email","Email"); add("–ê–¥—Ä–µ—Å–∞","Address")
        add("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç","Transport"); add("–†–∞–±–æ—Ç–∞","Work"); add("–ü–∞—Å–ø–æ—Ä—Ç","Passport")
        add("–ò–ù–ù","Inn"); add("–°–ù–ò–õ–°","Snils"); add("–î–æ–ª–≥–∏","Debts"); add("–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏","Relatives"); add("URL","Url")
        parts.append("---")
    return "\n".join(parts)

async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton("–ü–æ –§–ò–û+–¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="fio")],
          [InlineKeyboardButton("–ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="phone")],
          [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(kb))
    return CHOOSING

async def choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    if q.data == "cancel":
        await q.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ."); return ConversationHandler.END
    context.user_data["type"] = q.data
    if q.data == "fio":
        await q.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ: `–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á 01.01.1990`")
    else:
        await q.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä: `7925...` –∏–ª–∏ `+7925...`")
    return TYPING

async def text_recv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stype = context.user_data.get("type"); text = update.message.text.strip()
    if not stype: 
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"); return ConversationHandler.END
    query = "".join(ch for ch in text if ch.isdigit() or ch=="+") if stype=="phone" else text
    await update.message.reply_text("–ò—â—É‚Ä¶")
    try:
        data = call_breachka(query)
        out = fmt(data)
        if len(out)>3900: out = out[:3900] + "\n\n(–æ–±—Ä–µ–∑–∞–Ω–æ)"
        await update.message.reply_text(out, parse_mode="Markdown")
    except requests.HTTPError as e:
        await update.message.reply_text(f"HTTP –æ—à–∏–±–∫–∞: {getattr(e.response,'status_code', '')}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
    return ConversationHandler.END

async def help_cmd(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start /find /help")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start), CommandHandler("find", start)],
        states={CHOOSING:[CallbackQueryHandler(choice)], TYPING:[MessageHandler(filters.TEXT & ~filters.COMMAND, text_recv)]},
        fallbacks=[],
    )
    app.add_handler(conv); app.add_handler(CommandHandler("help", help_cmd))
    app.run_polling()

if __name__ == "__main__":
    main()
