# trigger deploy
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import json
import logging
from collections import defaultdict

import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, ConversationHandler, filters
)

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–æ–∫—Ä—É–∂–µ–Ω–∏–µ ----------
CHOOSING, TYPING = range(2)

BREACHKA_API_KEY = os.environ.get("BREACHKA_API_KEY")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not BREACHKA_API_KEY or not TELEGRAM_TOKEN:
    raise RuntimeError("Set BREACHKA_API_KEY and TELEGRAM_TOKEN env vars")

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ----------
_rx_date = re.compile(r"^\d{2}\.\d{2}\.\d{4}$")
_rx_year = re.compile(r"^\d{4}$")
_rx_fio = re.compile(r"^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+$")  # –§–∞–º –ò–º—è –û—Ç—á
_rx_phone = re.compile(r"^\+?7\d{10}$|^8\d{10}$|^7\d{10}$|^\d{11}$")

def is_fio_query(text: str) -> bool:
    """
    –§–æ—Ä–º–∞—Ç—ã:
      - '–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á 06.04.1994'
      - '–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á 1994'
    """
    parts = text.strip().split()
    if len(parts) != 4:
        return False
    fio = " ".join(parts[:3])
    tail = parts[3]
    return bool(_rx_fio.match(fio) and (_rx_date.match(tail) or _rx_year.match(tail)))

def is_phone_query(text: str) -> bool:
    t = re.sub(r"\D", "", text)
    if t.startswith("8"):
        t = "7" + t[1:]
    return bool(_rx_phone.match(t if t.startswith("7") else "7"+t[-10:]))

def normalize_phone(text: str) -> str:
    t = re.sub(r"\D", "", text)
    if t.startswith("8"):
        t = "7" + t[1:]
    if not t.startswith("7"):
        t = "7" + t[-10:]
    return t

def lkeys(d: dict) -> dict:
    """–∫–ª—é—á–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä (–¥–ª—è –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –æ—Ç Breachka)."""
    return {(k.lower() if isinstance(k, str) else k): v for k, v in d.items()}

# ---------- –í—ã–∑–æ–≤ API ----------
def call_breachka(single_query: str, need_country: bool) -> dict:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON c –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º –ø–æ–ª–µ–π.
    FindType ‚Äî Detail (–ø–æ–¥—Ä–æ–±–Ω–æ).
    CountryType –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω (–§–ò–û-–∑–∞–ø—Ä–æ—Å).
    """
    url = "https://www.breachka.com/api/v1/find/mass"
    headers = {"X-Api-Key": BREACHKA_API_KEY, "Content-Type": "application/json"}
    payload = {
        "Requests": [single_query],
        "FindType": "Detail",
    }
    if need_country:
        payload["CountryType"] = "RU"

    r = requests.post(url, headers=headers, json=payload, timeout=40)
    r.raise_for_status()
    return r.json()

# ---------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ----------
def fmt(resp: dict) -> str:
    parts = []

    # –û—Ç–º–µ—Ç–∏–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    bad = resp.get("NotValidRequests") or resp.get("notValidRequests") or []
    if bad:
        parts.append("‚ùó –ó–∞–ø—Ä–æ—Å—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é:\n" + "\n".join(f"- {b}" for b in bad))

    outer = resp.get("Responses") or resp.get("responses") or []
    if not outer:
        parts.append("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞–ª–∏–¥–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º.")
        return "\n".join(parts)

    for block in outer:
        b = lkeys(block)
        q = b.get("query") or b.get("Query") or ""
        parts.append(f"üîé *–ó–∞–ø—Ä–æ—Å:* `{q}`")

        inner = b.get("responses", [])
        if not inner:
            parts.append("‚Äî –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤.")
            continue

        # –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        agg = defaultdict(list)
        sources_acc = []

        for one in inner:
            o = lkeys(one)
            for k, v in o.items():
                if k == "sources" and isinstance(v, list):
                    sources_acc.extend(v)
                elif isinstance(v, list):
                    for val in v:
                        if val is None or val == "":
                            continue
                        if val not in agg[k]:
                            agg[k].append(val)

        def add(name: str, key: str, limit: int = 12):
            vals = agg.get(key, [])
            if vals:
                shown = vals[:limit]
                more = len(vals) - len(shown)
                s = "; ".join(map(str, shown)) + (f" (–∏ –µ—â—ë {more})" if more > 0 else "")
                parts.append(f"*{name}:* {s}")

        # –ø–æ–ª—è
        add("–¢–µ–ª–µ—Ñ–æ–Ω—ã", "phone")
        add("–û–ø–µ—Ä–∞—Ç–æ—Ä/–†–µ–≥–∏–æ–Ω", "opsos")
        add("–§–ò–û", "fio")
        add("–ò–º–µ–Ω–∞/–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã", "names")
        add("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "born")
        add("–ê–¥—Ä–µ—Å–∞", "address")
        add("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "transport")
        add("Email", "email")
        add("–ü–∞—Ä–æ–ª–∏", "password")
        add("URL/–ü—Ä–æ—Ñ–∏–ª–∏", "url")
        add("–Æ–∑–µ—Ä–Ω–µ–π–º—ã", "username")
        add("ICQ", "icq")
        add("Skype", "skype")
        add("Telegram", "telegram")
        add("–†–∞–±–æ—Ç–∞", "work")
        add("–ê–¥—Ä–µ—Å–∞ —Ä–∞–±–æ—Ç—ã", "workaddress")  # —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ camelCase
        add("–ü–∞—Å–ø–æ—Ä—Ç–∞", "passport")
        add("–ò–ù–ù", "inn")
        add("–°–ù–ò–õ–°", "snils")
        add("–î–æ–ª–≥–∏", "debts")
        add("–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏", "relatives")

        # –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if sources_acc:
            labels = []
            for s in sources_acc:
                s = lkeys(s)
                label = s.get("name") or s.get("url") or "–ò—Å—Ç–æ—á–Ω–∏–∫"
                if label not in labels:
                    labels.append(label)
            parts.append(f"*–ò—Å—Ç–æ—á–Ω–∏–∫–∏:* {', '.join(labels[:8])}" + ("‚Ä¶" if len(labels) > 8 else ""))

        parts.append("‚Äî ‚Äî ‚Äî")

    return "\n".join(parts)

# ---------- Telegram ----------
def main_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üßë‚Äçüíº –§–ò–û + –¥–∞—Ç–∞/–≥–æ–¥", callback_data="fio")],
        [InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="phone")],
    ])

def again_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîé –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="newsearch")]])

async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=main_kb()
    )
    return CHOOSING

async def new_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=main_kb())
    return CHOOSING

async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "fio":
        context.user_data["type"] = "fio"
        await q.edit_message_text(
            "‚úç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –û–î–ù–û–ô —Å—Ç—Ä–æ–∫–µ:\n"
            "‚Ä¢ `–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á 06.04.1994`\n"
            "‚Ä¢ `–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á 1994`",
            parse_mode="Markdown"
        )
    else:
        context.user_data["type"] = "phone"
        await q.edit_message_text(
            "‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `79250000000` (–º–æ–∂–Ω–æ —Å +7 –∏–ª–∏ 8).",
            parse_mode="Markdown"
        )
    return TYPING

async def text_recv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
    t = context.user_data.get("type")
    need_country = False
    query = raw

    if t == "fio":
        if not is_fio_query(raw):
            await update.message.reply_text(
                "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏–º–µ—Ä—ã:\n"
                "`–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á 06.04.1994` –∏–ª–∏ `–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á 1994`",
                parse_mode="Markdown", reply_markup=again_kb()
            )
            return ConversationHandler.END
        need_country = True
    else:  # phone
        if not is_phone_query(raw):
            await update.message.reply_text(
                "‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∫–∞–∫ `79250000000` (–º–æ–∂–Ω–æ +7/8).",
                parse_mode="Markdown", reply_markup=again_kb()
            )
            return ConversationHandler.END
        query = normalize_phone(raw)

    await update.message.reply_text("‚è≥ –ò—â—É –¥–∞–Ω–Ω—ã–µ‚Ä¶")

    try:
        data = call_breachka(query, need_country=need_country)
        logger.info("BREACHKA RAW RESPONSE: %s", json.dumps(data, ensure_ascii=False))
        out = fmt(data)
        if len(out) > 3900:
            out = out[:3900] + "\n\n(–æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)"
        await update.message.reply_text(out, parse_mode="Markdown", reply_markup=again_kb())
    except requests.HTTPError as e:
        code = getattr(e.response, "status_code", "")
        await update.message.reply_text(f"HTTP –æ—à–∏–±–∫–∞: {code}", reply_markup=again_kb())
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=again_kb())

    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [
                CallbackQueryHandler(choose_type, pattern="^(fio|phone)$"),
                CallbackQueryHandler(new_search, pattern="^newsearch$")
            ],
            TYPING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, text_recv),
                CallbackQueryHandler(new_search, pattern="^newsearch$")
            ],
        },
        fallbacks=[CallbackQueryHandler(new_search, pattern="^newsearch$")],
        name="main_conv",
        persistent=False,
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("new", start))  # /new ‚Äî –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞

    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
