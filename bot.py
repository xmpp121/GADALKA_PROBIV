# trigger deploy
#!/usr/bin/env python3
import os, logging, requests, json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, ConversationHandler, filters
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CHOOSING, TYPING = range(2)

BREACHKA_API_KEY = os.environ.get("BREACHKA_API_KEY")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not BREACHKA_API_KEY or not TELEGRAM_TOKEN:
    raise RuntimeError("Set BREACHKA_API_KEY and TELEGRAM_TOKEN env vars")

# ---------------- API ----------------
def call_breachka(single_query: str, find_type="Detail", country="RU"):
    url = "https://www.breachka.com/api/v1/find/mass"
    headers = {"X-Api-Key": BREACHKA_API_KEY, "Content-Type": "application/json"}
    payload = {
        "Requests": [single_query],   # —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        "FindType": find_type,        # Detail = –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç
        "CountryType": country
    }
    r = requests.post(url, headers=headers, json=payload, timeout=30)
    r.raise_for_status()
    return r.json()

def fmt(resp: dict) -> str:
    parts = []
    bad = resp.get("NotValidRequests", [])
    if bad:
        parts.append("‚ùó –ó–∞–ø—Ä–æ—Å—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é:\n" + "\n".join(f"- {b}" for b in bad))

    arr = resp.get("Responses", [])
    if not arr:
        parts.append("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞–ª–∏–¥–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º.")
        return "\n".join(parts)

    for e in arr:
        parts.append(f"üîé *–ó–∞–ø—Ä–æ—Å:* `{e.get('Query','')}`")
        inner = e.get("Responses", [])
        if not inner:
            parts.append("‚Äî –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤.")
            continue
        r = inner[0]

        def add(name, key, limit=6):
            vals = r.get(key, [])
            if vals:
                shown = vals[:limit]
                more = len(vals) - len(shown)
                s = "; ".join(map(str, shown)) + (f" (–∏ –µ—â—ë {more})" if more>0 else "")
                parts.append(f"*{name}:* {s}")

        add("–¢–µ–ª–µ—Ñ–æ–Ω—ã","Phone")
        add("Email","Email")
        add("–ê–¥—Ä–µ—Å–∞","Address")
        add("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç","Transport")
        add("–†–∞–±–æ—Ç–∞","Work")
        add("–ü–∞—Å–ø–æ—Ä—Ç","Passport")
        add("–ò–ù–ù","Inn")
        add("–°–ù–ò–õ–°","Snils")
        add("–î–æ–ª–≥–∏","Debts")
        add("–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏","Relatives")
        add("URL","Url")

        parts.append("‚Äî ‚Äî ‚Äî")
    return "\n".join(parts)

# ---------------- Telegram ----------------
async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("üë§ –§–ò–û + –¥–∞—Ç–∞/–≥–æ–¥", callback_data="fio")],
        [InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="phone")]
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return CHOOSING

async def choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    if q.data == "fio":
        context.user_data["type"] = "fio"
        await q.edit_message_text(
            "‚úç –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á 06.04.1994`) "
            "–∏–ª–∏ –§–ò–û + –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á 1994`).",
            parse_mode="Markdown"
        )
    elif q.data == "phone":
        context.user_data["type"] = "phone"
        await q.edit_message_text(
            "‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `79250000000`.",
            parse_mode="Markdown"
        )

    return TYPING

async def text_recv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    await update.message.reply_text("‚è≥ –ò—â—É –¥–∞–Ω–Ω—ã–µ...")

    try:
        data = call_breachka(text)
        out = fmt(data)
        if len(out) > 3900:
            out = out[:3900] + "\n\n(–æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)"
        kb = [[InlineKeyboardButton("üîé –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="newsearch")]]
        await update.message.reply_text(out, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))
    except requests.HTTPError as e:
        await update.message.reply_text(f"HTTP –æ—à–∏–±–∫–∞: {getattr(e.response,'status_code', '')}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    return ConversationHandler.END

async def new_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    kb = [
        [InlineKeyboardButton("üë§ –§–ò–û + –¥–∞—Ç–∞/–≥–æ–¥", callback_data="fio")],
        [InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="phone")]
    ]
    await q.edit_message_text(
        "üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return CHOOSING

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING:[CallbackQueryHandler(choice, pattern="^(fio|phone)$"),
                      CallbackQueryHandler(new_search, pattern="^newsearch$")],
            TYPING:[MessageHandler(filters.TEXT & ~filters.COMMAND, text_recv)]
        },
        fallbacks=[],
    )
    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
